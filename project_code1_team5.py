# -*- coding: utf-8 -*-
"""Project-Code1-Team5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18oa0XGTJur5wETr91a2Nsb0hFYz5tced
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import drive
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, log_loss
from sklearn.metrics import roc_curve, auc
from imblearn.under_sampling import RandomUnderSampler
import matplotlib.ticker as ticker
import xgboost as xgb
import seaborn as sns

drive.flush_and_unmount()

drive.mount('/content/drive')

train_data = pd.read_csv("/content/drive/MyDrive/Final Project Dataset/ProjectTrainingData.csv")
train_data.head()

test_data = pd.read_csv("/content/drive/MyDrive/Final Project Dataset/ProjectTestData.csv")
test_data.head()

train_data.shape

# list all the columns
train_data.columns

test_data.shape

train_data.nunique()

#clean the dataset
train_data.info()

# Retrieve the hour, day of the week, and day of month
train_data["hour"] = pd.to_datetime(train_data['hour'], format='%y%m%d%H')
train_data['hour_of_day'] = train_data['hour'].dt.hour
train_data['day_of_week'] = train_data['hour'].dt.weekday + 1
train_data['day_of_month'] = train_data['hour'].dt.day
train_data.tail()

train_data.head()

# Retrieve the hour, day of the week, and day of month
test_data["hour"] = pd.to_datetime(test_data['hour'], format='%y%m%d%H')
test_data['hour_of_day'] = test_data['hour'].dt.hour
test_data['day_of_week'] = test_data['hour'].dt.weekday + 1
test_data['day_of_month'] = test_data['hour'].dt.day
test_data.tail()

test_data.shape

# Assuming 'train_data' is your DataFrame
corr = train_data.corr()
# Set the size of the figure
plt.figure(figsize=(14, 8))  # You can adjust the dimensions as needed
# Create the heatmap with annotations rounded to two decimals
sns.heatmap(corr, cmap='YlGnBu', annot=True, fmt=".2f")
# Rotate tick marks for visibility
plt.yticks(rotation=0)
plt.xticks(rotation=90)
# Show the plot
plt.show()



# Group by 'hour' and count occurrences of each 'click' type
def human_readable_format(x, pos):
    if x >= 1e6:
        return '{:.1f}M'.format(x*1e-6)
    elif x >= 1e3:
        return '{:.0f}K'.format(x*1e-3)
    return '{}'.format(int(x))

click_counts = train_data.groupby('hour_of_day')['click'].value_counts().unstack().fillna(0)
# Plotting
click_counts.plot(kind='bar', figsize=(10, 4), width=0.9)
plt.title('Click Frequencies by Hour')
plt.xlabel('Hour')
plt.ylabel('Number of Clicks')
plt.xticks(rotation=45)
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(human_readable_format))
plt.xticks(rotation=0)
plt.legend(title='Click', labels=['Not Clicked', 'Clicked'])
plt.show()

# Define columns to drop - ensure these are exactly as they appear in your DataFrame
columns_to_drop = ['id', 'hour', 'site_id', 'site_domain', 'app_id',
                   'app_domain', 'device_id', 'device_ip']
# Drop the columns
train_data = train_data.drop(columns=columns_to_drop, axis=1)

# Drop the columns
test_data = test_data.drop(columns=columns_to_drop, axis=1 )

test_data.info()

train_data.info()

categorical = []

for col in train_data.columns:
    if train_data[col].dtype == 'object':
        categorical.append(col)

print("Categorical Variables: ", categorical)

categorical_test = []

for col in test_data.columns:
    if test_data[col].dtype == 'object':
        categorical_test.append(col)
print("Categorical Variables in test: ", categorical_test)

# Dictionary to hold the results
distinct_values_not_in_train = {}

for col in categorical:
    # Convert column values to sets
    train_values = set(train_data[col].unique())
    test_values = set(test_data[col].unique())

    # Find values in test not in train
    not_in_train = test_values - train_values

    # Store the result
    distinct_values_not_in_train[col] = not_in_train

# Display the results
for col, values in distinct_values_not_in_train.items():
    print(f"Values in test but not in train for '{col}': {values}")

for col in categorical:
    most_frequent_value = train_data[col].mode()[0]
    train_values = set(train_data[col].unique())
    test_values = set(test_data[col].unique())
    not_in_train = test_values - train_values
    test_data[col] = test_data[col].apply(lambda x: most_frequent_value if x in not_in_train else x)

le = LabelEncoder()
for column in categorical:
    # Fit and transform the training data
    train_data[column] = le.fit_transform(train_data[column])
    test_data[column] = le.transform(test_data[column])

train_data.head()

test_data.head()

test_data.info()

# Create a bar plot to visualize class distribution
click_distribution = train_data['click'].value_counts()
plt.figure(figsize=(6, 4))
click_distribution.plot(kind='bar', color=['blue', 'red'])
plt.title('Class Distribution of Click')
plt.xlabel('Click')
plt.ylabel('Count')
# Set the custom formatter for y-axis
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(human_readable_format))
plt.xticks(rotation=0)
plt.show()

# Get the X variable
X = train_data.drop('click', axis=1)
# Get the y variable
y = train_data['click']

X.columns

y

# Handle class imbalance
from imblearn.under_sampling import RandomUnderSampler
# Initialize the RandomUnderSampler
rus = RandomUnderSampler(random_state=42)

# Resample the dataset
X_resampled, y_resampled = rus.fit_resample(X, y)

# Create a new DataFrame with the resampled data
train_data_resampled = pd.DataFrame(X_resampled, columns=X.columns)
train_data_resampled['click'] = y_resampled

train_data_resampled.shape

# Assuming train_data_resampled is your DataFrame and 'click' is the column of interest
click_distribution = train_data_resampled['click'].value_counts()

# Create a bar plot to visualize class distribution
plt.figure(figsize=(6, 4))
click_distribution.plot(kind='bar', color=['blue', 'red'])
plt.title('Class Distribution of Click')
plt.xlabel('Click')
plt.ylabel('Count')

# Set the custom formatter for y-axis
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(human_readable_format))

plt.xticks(rotation=0)
plt.show()

train_data_resampled.to_csv('/content/drive/MyDrive/Final Project Dataset/ProjectTrainingDataBalanced.csv', index=False)

test_data.to_csv('/content/drive/MyDrive/Final Project Dataset/ProjectTestingEncoded.csv', index=False)