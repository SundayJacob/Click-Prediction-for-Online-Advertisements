# -*- coding: utf-8 -*-
"""Project-Code3-Team5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16id00p-cWHwU6wMnIVHXNj0rwjFnGbCV
"""



drive.mount('/content/drive')

train_data = pd.read_csv('/content/drive/MyDrive/Final Project Dataset/ProjectTrainingDataBalanced.csv')
test_data = pd.read_csv('/content/drive/MyDrive/Final Project Dataset/ProjectTestingEncoded.csv')

train_data.head()

test_data.head()

"""Split the data X_train and Y_train"""

X = train_data.drop(['click'], axis=1)
y = train_data['click']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Define the parameter grid
param_grid = {
    'max_depth': [2, 5, 8, 12],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 5]
}
# Create a Decision Tree Classifier
dtree = DecisionTreeClassifier(random_state=42)
# Instantiate the Grid Search model
grid_search = GridSearchCV(dtree, param_grid, cv=5, verbose=2, n_jobs=-1)
# Fit the grid search to the data
grid_search.fit(X_train, y_train)
# Best parameters and best score
print("Best Parameters:", grid_search.best_params_)
print("Best Score:", grid_search.best_score_)

# Use the best model to make predictions
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)
y_pred_proba = best_model.predict_proba(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

# Calculate and print log loss
log_loss_val = log_loss(y_test, y_pred_proba)
print(f'Log Loss: {log_loss_val:.4f}')





